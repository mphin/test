name: Plugin Workflow

on:
  push:
    branches:
      - main

jobs:
  Plugin_update:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Update Plugin
      run: |
        conf_folder="plugin/conf"
        script_folder="plugin/script"
        plugin_folder="plugin"
        mkdir -p "$conf_folder" "$script_folder" "$plugin_folder"
        
        current_year=$(date +'%Y')
        previous_year_1=$((current_year - 1))
        previous_year_2=$((current_year - 2))
        
        for conf_file in $conf_folder/*.conf; do
            if [ -f "$conf_file" ]; then
                download_url=$(grep '^#!url =' "$conf_file" | sed 's/^#!url = //')
                download_file="$script_folder/$(basename "$conf_file" .conf).js"
                wget -O "$download_file" "$download_url"

                name=$(grep '^#!name =' "$conf_file" | sed 's/^#!name = //')
                desc=$(grep '^#!desc =' "$conf_file" | sed 's/^#!desc = //')
                openUrl=$(grep '^#!openUrl =' "$conf_file" | sed 's/^#!openUrl = //')
                author=$(grep '^#!author =' "$conf_file" | sed 's/^#!author = //')
                homepage=$(grep '^#!homepage =' "$conf_file" | sed 's/^#!homepage = //')
                icon=$(grep '^#!icon =' "$conf_file" | sed 's/^#!icon = //')
                date=$(grep -oE "$current_year[-/.年][[:digit:]]{1,2}[-/.年][[:digit:]]{1,2}|$previous_year_1[-/.年][[:digit:]]{1,2}[-/.年][[:digit:]]{1,2}|$previous_year_2[-/.年][[:digit:]]{1,2}[-/.年][[:digit:]]{1,2}" "$download_file" || grep '^#!date =' "$conf_file" | sed 's/^#!date = //')

                plugin_file="$plugin_folder/$(basename "$conf_file" .conf).plugin"
                echo "#!name = $name" > "$plugin_file"
                echo "#!desc = $desc" >> "$plugin_file"
                echo "#!openUrl = $openUrl" >> "$plugin_file"
                echo "#!author = $author" >> "$plugin_file"
                echo "#!homepage = $homepage" >> "$plugin_file"
                echo "#!icon = $icon" >> "$plugin_file"
                echo "#!date = $date" >> "$plugin_file"

                mitm=$(grep '^\hostname =' "$conf_file" || grep -i '^\hostname =' "$download_file")
                script=$(awk '/\[Script\]/{flag=1; next} /^\[/{flag=0} flag' "$conf_file")
                [ -z "$script" ] && script=$(awk '/\[rewrite_local\]/{flag=1; next} /^\[/{flag=0} flag' "$download_file")

                echo -e "\n[MITM]\n$mitm" >> "$plugin_file"
                echo -e "\n[Script]\n$script" >> "$plugin_file"
                
                # http-response
                sed -i '/script-response-body/ s/^/http-response /' "$plugin_file"
                sed -i '/script-response-body/ s/$/, requires-body = true, tag =/' "$plugin_file"
                sed -i 's/url script-response-body/script-path =/' "$plugin_file"
                line_number=$(grep -n 'http-response' "$plugin_file" | cut -d: -f1)
                if [ "$line_number" ]; then
                    previous_line_number=$((line_number - 1))
                    previous_line=$(sed -n "${previous_line_number}p" "$plugin_file")
                    if [[ "$previous_line" == *"# "* ]]; then
                        comment_value=$(echo "$previous_line" | sed 's/^# *//')
                        sed -i -e "/http-response/ s/$/ $comment_value/" "$plugin_file"
                    else
                        name_value=$(grep -m 1 '#!name = ' "$plugin_file" | sed 's/^#!name = //')
                        sed -i -e "/http-response/ s/$/ $name_value/" "$plugin_file"
                    fi
                fi

                # http-request
                sed -i '/script-request-header/ s/^/http-request /' "$plugin_file"
                sed -i '/script-request-header/ s/$/, tag =/' "$plugin_file"
                sed -i 's/url script-request-header/script-path =/' "$plugin_file"
                line_number=$(grep -n 'http-request' "$plugin_file" | cut -d: -f1)
                if [ "$line_number" ]; then
                    previous_line_number=$((line_number - 1))
                    previous_line=$(sed -n "${previous_line_number}p" "$plugin_file")
                    if [[ "$previous_line" == *"# "* ]]; then
                        comment_value=$(echo "$previous_line" | sed 's/^# *//')
                        sed -i -e "/http-request/ s/$/ $comment_value/" "$plugin_file"
                    else
                        name_value=$(grep -m 1 '#!name = ' "$plugin_file" | sed 's/^#!name = //')
                        sed -i -e "/http-request/ s/$/ $name_value/" "$plugin_file"
                    fi
                fi
                
                rm "$download_file"
                while IFS= read -r line; do
                  if [[ "$line" == *"script-path = "* ]]; then
                    script_download_url=$(echo "$line" | sed -n 's/^.*script-path\s*=\s*\([^,]*\).*$/\1/p')
                    echo "$script_download_url"
                    wget -O "$script_folder/$(basename "$script_download_url")" "$script_download_url"
                    base_url="https://raw.githubusercontent.com/mphin/test/main/"
                    full_url="$base_url$script_folder/$(basename "$script_download_url")"
                    sed -i "s#$(sed 's/[&/\]/\\&/g' <<< "$script_download_url")#$full_url#" "$plugin_file"
                  fi
                done < "$plugin_file"
            fi
        done

    - name: Commit and push
      run: |
        git config --global user.email "mphin@qq.com" && git config --global user.name "Bot"
        git add . && git commit -m "自动更新$(date +'%Y-%m-%d %H:%M')" || exit 0
        git push

    - name: Cleanup Workflow
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 2
