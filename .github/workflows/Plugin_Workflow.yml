name: Plugin_Workflow

on:
  workflow_dispatch:
  schedule:
    - cron: "0 20 * * *"
  push:
    branches:
      - main
    paths:
      - 'loon/plugin/**'

jobs:
  Plugin_update:
    runs-on: ubuntu-latest

    steps:
    - name: Set up time zone
      run: sudo timedatectl set-timezone Asia/Shanghai

    - name: Checkout repository
      uses: actions/checkout@main

    - name: Update Plugin
      run: |
        plugin_folder="loon/plugin"
        conf_folder="loon/plugin/conf"
        base_url="https://raw.githubusercontent.com/$GITHUB_REPOSITORY/main/"
        mkdir -p "$conf_folder" "$plugin_folder"
        
        current_year=$(date +'%Y')
        current_date=$(date "+%Y-%m-%d %H:%M:%S")
        previous_year_1=$((current_year - 1))
        previous_year_2=$((current_year - 2))

        for conf_file in $conf_folder/*.conf; do
            if [ -f "$conf_file" ]; then
                download_url=$(grep '^#!url =' "$conf_file" | sed -e 's/^#!url =//' -e 's/ //g')
                download_file="$plugin_folder/$(basename "$conf_file" .conf)/$(basename "$download_url")"
                mkdir -p "$plugin_folder/$(basename "$conf_file" .conf)/script"
                wget -O "$download_file" "$download_url"

                name=$(grep '^#!name =' "$conf_file" | sed -e 's/^#!name =//' -e 's/ //g' || grep '^#!name =' "$download_file" | sed -e 's/^#!name =//' -e 's/ //g')
                desc=$(grep '^#!desc =' "$conf_file" | sed -e 's/^#!desc =//' -e 's/ //g')
                [ -z "$desc" ] && desc="仅供学习和个人使用，不得用于商业目的或其他非法用途"
                openUrl=$(grep '^#!openUrl =' "$conf_file" | sed -e 's/^#!openUrl =//' -e 's/ //g')
                author=$(grep '^#!author =' "$conf_file" | sed -e 's/^#!author =//' -e 's/ //g')
                homepage=$(grep '^#!homepage =' "$conf_file" | sed -e 's/^#!homepage =//' -e 's/ //g')
                icon=$(grep '^#!icon =' "$conf_file" | sed -e 's/^#!icon =//' -e 's/ //g')
                date=$(awk '/\/\*/,/\*\// || /#/' "$download_file" | grep -oEm 1 "$current_year[-/年.][[:digit:]]{1,2}[-/年.][[:digit:]]{1,2}|$previous_year_1[-/年.][[:digit:]]{1,2}[-/年.][[:digit:]]{1,2}|$previous_year_2[-/年.][[:digit:]]{1,2}[-/年.][[:digit:]]{1,2}" || grep '^#!date =' "$conf_file" | sed -E 's/^#!date[[:space:]]*=[[:space:]]*//')
                [ -z "$date" ] && date="$current_date" && sed -i "s/#!date =.*/#!date = $current_date/" "$conf_file"
                date=$(echo "$date" | sed -e 's/[\/年.]/-/g' -e '/[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} [0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}/! s/$/ 00:00:00/')

                plugin_file="$plugin_folder/$(basename "$conf_file" .conf).plugin"
                echo "#!name = $name" > "$plugin_file"
                echo "#!desc = $desc" >> "$plugin_file"
                if [ -n "$openUrl" ]; then
                    echo "#!openUrl = $openUrl" >> "$plugin_file"
                fi
                if [ -n "$author" ]; then
                    echo "#!author = $author" >> "$plugin_file"
                fi
                if [ -n "$homepage" ]; then
                    echo "#!homepage = $homepage" >> "$plugin_file"
                fi
                if [ -n "$icon" ]; then
                    echo "#!icon = $icon" >> "$plugin_file"
                fi
                echo "#!date = $date" >> "$plugin_file"

                mitm=$(grep '^\hostname =' "$conf_file" || grep -i '^\hostname =' "$download_file" | sed 's/%INSERT% //')
                script=$(awk '/\[Script\]/{flag=1; next} /^\[/{flag=0} flag && NF' "$conf_file")
                [ -z "$script" ] && script=$(awk '/\[rewrite_local\]/{flag=1; next} /^\[/{flag=0} flag && NF' "$download_file")
                rewrite=$(awk '/\[Rewrite\]/{flag=1; next} /^\[/{flag=0} flag && NF' "$conf_file")
                [ -z "$rewrite" ] && rewrite=$(awk '/\[URL Rewrite\]/{flag=1; next} /^\[/{flag=0} flag && NF' "$download_file")

                echo -e "\n[MITM]\n$mitm" >> "$plugin_file"
                if [ -n "$script" ]; then
                    echo -e "\n[Script]\n$script" >> "$plugin_file"
                fi
                if [ -n "$rewrite" ]; then
                    echo -e "\n[Rewrite]\n$rewrite" >> "$plugin_file"
                fi
                
                # http-response
                sed -i '/script-response-body/ s/^/http-response /' "$plugin_file"
                sed -i '/script-response-body/ s/$/, requires-body = true, tag =/' "$plugin_file"
                sed -i 's/url script-response-body/script-path =/' "$plugin_file"

                # http-request
                sed -i '/script-request-header/ s/^/http-request /' "$plugin_file"
                sed -i '/script-request-header/ s/$/, tag =/' "$plugin_file"
                sed -i 's/url script-request-header/script-path =/' "$plugin_file"

                #tag=
                for keyword in 'http-response' 'http-request'; do
                    line_numbers=$(grep -n "$keyword" "$plugin_file" | cut -d: -f1)
                    for line_number in $line_numbers; do
                        if [ "$line_number" ]; then
                            current_line=$(sed -n "${line_number}p" "$plugin_file")
                            if [[ "$current_line" =~ [=]$ || "$current_line" =~ [=][[:space:]]$ ]]; then
                                previous_line_number=$((line_number - 1))
                                previous_line=$(sed -n "${previous_line_number}p" "$plugin_file")
                                if [[ "$previous_line" == "#"* ]]; then
                                   comment_value=$(echo "$previous_line" | sed 's/^# *//')
                                    sed -i -e "${line_number}s/$/ $comment_value/" "$plugin_file"
                                else
                                    name_value=$(grep -m 1 '#!name = ' "$plugin_file" | sed 's/^#!name = //')
                                    sed -i -e "${line_number}s/$/ $name_value/" "$plugin_file"
                                fi
                            fi
                        fi
                    done
                done

                #rm "$download_file"
                while IFS= read -r line; do
                  if [[ "$line" == *"script-path"* ]]; then
                    script_download_url=$(echo "$line" | sed -n 's/^.*script-path\s*=\s*\([^,]*\).*$/\1/p')
                    #mkdir -p "$plugin_folder/$(basename "$conf_file" .conf)/script"
                    wget -O "$plugin_folder/$(basename "$conf_file" .conf)/script/$(basename "$script_download_url")" "$script_download_url"
                    full_url="$base_url$plugin_folder/$(basename "$conf_file" .conf)/script/$(basename "$script_download_url")"
                    sed -i "s#$(sed 's/[&/\]/\\&/g' <<< "$script_download_url")#$full_url#" "$plugin_file"
                  fi
                done < "$plugin_file"
            fi
        done
        
        # Update README
        plugin_files=$(find "$plugin_folder" -type f -name "*.plugin")
        readme_file="$plugin_folder/README.md"
        echo "# Loon插件" > "$readme_file"
        while IFS= read -r file; do
          plugin_name=$(grep -oP '#!name = \K(.+)' "$file" | head -n 1)
          if [ -n "$plugin_name" ]; then
            install_link="https://www.nsloon.com/openloon/import?plugin=$base_url$file"
            raw_link="$base_url$file"
            echo "- **$plugin_name**：" >> "$readme_file"
            echo "  - [点击安装]($install_link)" >> "$readme_file"
            echo "  - [$raw_link]($raw_link)" >> "$readme_file"
          fi
        done <<< "$plugin_files"

    - name: Commit and push
      run: |
        git config --global user.email "mphin@qq.com" && git config --global user.name "Bot"
        git add . && git commit -m "自动更新$(date +'%Y-%m-%d %H:%M')" || exit 0
        git push

    - name: Cleanup Workflow
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 2
