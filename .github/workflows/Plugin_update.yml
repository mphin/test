name: Plugin_update

on:
  workflow_dispatch:
  schedule:
    - cron: "0 20 * * *"
  push:
    branches:
      - main
    paths:
      - 'plugin/*'
      - '.github/workflows/Plugin_update.yml'
      
jobs:
  Plugin_update:
    runs-on: ubuntu-latest

    steps:
    - name: Set up time zone
      run: sudo timedatectl set-timezone Asia/Shanghai

    - name: Checkout repository
      uses: actions/checkout@main

    - name: Update Plugin
      run: |
        plugin_folder="plugin" #存放配置文件和js
        loon_plugin_folder="loon/plugin" #存放loon插件
        base_url="https://raw.githubusercontent.com/$GITHUB_REPOSITORY/${GITHUB_REF##*/}/"
        current_year=$(date +'%Y')
        current_date=$(date "+%Y-%m-%d %H:%M:%S")
        previous_year_1=$((current_year - 1))
        previous_year_2=$((current_year - 2))

        mkdir -p "$plugin_folder" "$plugin_folder" "$loon_plugin_folder" tmp
        for conf_file in $plugin_folder/*.conf; do
            if [ -f "$conf_file" ]; then
                sed -i '/^$/d' "$conf_file"
                head -n 1 "$conf_file" | grep -q '^http' && sed -i '1s/^/#!url = /' "$conf_file"
                download_url=$(grep -i "#!url" $conf_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                download_file="tmp/$(basename "$conf_file" .conf)/$(basename "$download_url")"
                [ -n "$download_url" ] && { mkdir -p "tmp/$(basename "$conf_file" .conf)/" && wget -O "$download_file" "$download_url"; }
                
                name=$(grep -i "#!name" $conf_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                [ -z "$name" ] && name=$(grep -i "#!name" $download_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                [ -z "$name" ] && name=$(basename "$conf_file" .conf)
                
                desc=$(grep -i "#!desc" $conf_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                [ -z "$desc" ] && desc=$(grep -i "#!desc" $download_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                [ -z "$desc" ] && desc="仅供学习和个人使用，不得用于商业目的或其他非法用途"
                
                openUrl=$(grep -i "#!openUrl" $conf_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                [ -z "$openUrl" ] && openUrl=$(grep -i "#!openUrl" $download_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                
                author=$(grep -i "#!author" "$conf_file" | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                [ -z "$author" ] && author=$(grep -i "#!author" "$download_file" | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                
                homepage=$(grep -i "#!homepage" $conf_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                [ -z "$homepage" ] && homepage=$(grep -i "#!homepage" $download_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                
                icon=$(grep -i "#!icon" $conf_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                [ -z "$icon" ] && icon=$(grep -i "#!icon" $download_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                
                select=$(grep -i "#!select" $conf_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                [ -z "$select" ] && select=$(grep -i "#!select" $download_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                
                input=$(grep -i "#!input" $conf_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                [ -z "$input" ] && input=$(grep -i "#!input" $download_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                
                date=$(grep -i "#!date" $conf_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                [ -z "$date" ] && date=$(awk '/\/\*/,/\*\// || /#/' "$download_file" | grep -oEm 1 "$current_year[-/年.][[:digit:]]{1,2}[-/年.][[:digit:]]{1,2}|$previous_year_1[-/年.][[:digit:]]{1,2}[-/年.][[:digit:]]{1,2}|$previous_year_2[-/年.][[:digit:]]{1,2}[-/年.][[:digit:]]{1,2}" || grep -i "#!date" $download_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                [ -z "$date" ] && { date="$current_date"; grep -q '^#!date' "$conf_file" && sed -i "s/^#!date.*/#!date = $current_date/" "$conf_file" || echo -e "\n#!date = $current_date" >> "$conf_file"; }
                date=$(echo "$date" | sed 's/[\/年.]/-/g; /[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} [0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}/! s/$/ 00:00:00/')

                plugin_file="tmp/$(basename "$conf_file" .conf).plugin"
                echo "#!name = $name" > "$plugin_file"
                echo "#!desc = $desc" >> "$plugin_file"
                [ -n "$openUrl" ] && echo "#!openUrl = $openUrl" >> "$plugin_file"
                [ -n "$author" ] && echo "#!author = $author" >> "$plugin_file"
                [ -n "$homepage" ] && echo "#!homepage = $homepage" >> "$plugin_file"
                if [ -n "$icon" ]; then
                    mkdir -p "tmp/$(basename "$conf_file" .conf)/icon"
                    wget -O "tmp/$(basename "$conf_file" .conf)/icon/$(basename "$conf_file" .conf).png" "$icon"
                    icon="$base_url$plugin_folder/$(basename "$conf_file" .conf)/icon/$(basename "$conf_file" .conf).png"
                    echo "#!icon = $icon" >> "$plugin_file"
                else
                    icon_folder="$plugin_folder/$(basename "$conf_file" .conf)/icon"
                    if [ -d "$icon_folder" ]; then
                        if [ "$(ls -A $icon_folder)" ]; then
                            for file in "$icon_folder"/*; do
                                mv "$file" "$icon_folder/$(basename "$conf_file" .conf).png" || true
                                icon="$base_url$icon_folder/$(basename "$conf_file" .conf).png"
                                echo "#!icon = $icon" >> "$plugin_file"
                            done
                        fi
                    fi
                fi
                [ -n "$select" ] && echo "$select" | sed 's/^/#!select = /' >> "$plugin_file"
                [ -n "$input" ] && echo "$input" | sed 's/^/#!input = /' >> "$plugin_file"
                echo "#!date = $date" >> "$plugin_file"

                mitm=$(grep -i "hostname" $conf_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//; s/,$//')
                [ -z "$mitm" ] &&mitm=$(grep -i "hostname" $download_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//; s/,$//' | sed 's/%INSERT% //; s/%APPEND% //')
                script=$(sed -n '/\[Script\]/,/^\[/p' "$conf_file" | sed '/^\[/d; /^[[:space:]]*$/d')
                [ -z "$script" ] && script=$(sed -n '/\[Script\]/,/^\[/p;/\[rewrite_local\]/,/^\[/p' "$download_file" | sed '/^\[/d; /^[[:space:]]*$/d')
                rewrite=$(sed -n '/\[Rewrite\]/,/^\[/p' "$conf_file" | sed '/^\[/d; /^[[:space:]]*$/d; /^#/d')
                [ -z "$rewrite" ] && rewrite=$(sed -n '/\[URL Rewrite\]/,/^\[/p;/\[Rewrite\]/,/^\[/p' "$download_file" | sed '/^\[/d; /^[[:space:]]*$/d; /^#/d')
                general=$(sed -n '/\[General\]/,/^\[/p' "$conf_file" | sed '/^\[/d; /^[[:space:]]*$/d; /^#/d')
                [ -z "$general" ] && general=$(sed -n '/\[General\]/,/^\[/p' "$download_file" | sed '/^\[/d; /^[[:space:]]*$/d; /^#/d' | sed '/always-raw-tcp-hosts/d')
                rule=$(sed -n '/\[Rule\]/,/^\[/p' "$conf_file" | sed '/^\[/d; /^[[:space:]]*$/d; /^#/d')
                [ -z "$rule" ] && rule=$(sed -n '/\[Rule\]/,/^\[/p' "$download_file" | sed '/^\[/d; /^[[:space:]]*$/d; /^#/d')
                host=$(sed -n '/\[Host\]/,/^\[/p' "$conf_file" | sed '/^\[/d; /^[[:space:]]*$/d; /^#/d')
                [ -z "$host" ] && host=$(sed -n '/\[Host\]/,/^\[/p' "$download_file" | sed '/^\[/d; /^[[:space:]]*$/d; /^#/d')
                
                [ -n "$general" ] && echo -e "\n[General]\n$general" >> "$plugin_file"
                [ -n "$rewrite" ] && echo -e "\n[Rewrite]\n$rewrite" >> "$plugin_file"
                [ -n "$host" ] && echo -e "\n[Host]\n$host" >> "$plugin_file"
                [ -n "$rule" ] && echo -e "\n[Rule]\n$rule" >> "$plugin_file"
                [ -n "$script" ] && echo -e "\n[Script]\n$script" >> "$plugin_file"
                [ -n "$mitm" ] && echo -e "\n[Mitm]\nhostname = $mitm" >> "$plugin_file"
                
                # http-response
                sed -i '/script-response-body/ s/^/http-response /' "$plugin_file"
                sed -i '/script-response-body/ s/$/, requires-body = true, tag =/' "$plugin_file"
                sed -i 's/url script-response-body/script-path =/' "$plugin_file"

                # http-request
                sed -i '/script-request-header/ s/^/http-request /' "$plugin_file"
                sed -i '/script-request-header/ s/$/, tag =/' "$plugin_file"
                sed -i 's/url script-request-header/script-path =/' "$plugin_file"

                #tag=
                for keyword in 'http-response' 'http-request'; do
                    line_numbers=$(grep -n "$keyword" "$plugin_file" | cut -d: -f1)
                    for line_number in $line_numbers; do
                        if [ "$line_number" ]; then
                            current_line=$(sed -n "${line_number}p" "$plugin_file")
                            if [[ "$current_line" =~ [=]$ || "$current_line" =~ [=][[:space:]]$ ]]; then
                                previous_line_number=$((line_number - 1))
                                previous_line=$(sed -n "${previous_line_number}p" "$plugin_file")
                                if [[ "$previous_line" == "#"* ]]; then
                                    comment_value=$(echo "$previous_line" | sed 's/^# *//')
                                    sed -i -e "${line_number}s/$/ $comment_value/" "$plugin_file"
                                else
                                    name_value=$(echo "$previous_line" | grep -o 'tag = [^ ]*' | sed 's/tag = //')
                                    [ -z "$name_value" ] && name_value=$name
                                    sed -i -e "${line_number}s/$/ $name_value/" "$plugin_file"
                                fi
                            fi
                        fi
                    done
                done
                sed -i '/^# /d' "$plugin_file"

                # script下载
                mkdir -p "tmp/$(basename "$conf_file" .conf)/script"
                while IFS= read -r line; do
                  if [[ "$line" == *"script-path"* ]]; then
                    script_download_url=$(echo "$line" | sed -n 's/^.*script-path\s*=\s*\([^,]*\).*$/\1/p')
                    wget -O "tmp/$(basename "$conf_file" .conf)/script/$(basename "$script_download_url")" "$script_download_url"
                    # 对比script内容更新date值
                    if [ -f "tmp/$(basename "$conf_file" .conf)/script/$(basename "$script_download_url")" ] && [ -f "$plugin_folder/$(basename "$conf_file" .conf)/script/$(basename "$script_download_url")" ]; then
                        if ! cmp -s "tmp/$(basename "$conf_file" .conf)/script/$(basename "$script_download_url")" "$plugin_folder/$(basename "$conf_file" .conf)/script/$(basename "$script_download_url")"; then
                            sed -i "s/#!date.*/#!date = $current_date/" "$plugin_file"
                            grep -q '^#!date' "$conf_file" && sed -i "s/^#!date.*/#!date = $current_date/" "$conf_file" || echo -e "\n#!date = $current_date" >> "$conf_file"
                        fi
                    fi
                    full_url="$base_url$plugin_folder/$(basename "$conf_file" .conf)/script/$(basename "$script_download_url")"
                    sed -i "s#$(sed 's/[&/\]/\\&/g' <<< "$script_download_url")#$full_url#" "$plugin_file"
                  fi
                done < "$plugin_file"
                
                # 对比文件内容更新date值
                grep -v '^#!date' "$plugin_file" > "plugin_new.tmp"
                if [ -f "$loon_plugin_folder/$(basename "$conf_file" .conf).plugin" ]; then
                    grep -v '^#!date' "$loon_plugin_folder/$(basename "$conf_file" .conf).plugin" > "plugin_old.tmp"
                fi
                if [ -f "plugin_new.tmp" ] && [ -f "plugin_old.tmp" ]; then
                    if ! cmp -s "plugin_new.tmp" "plugin_old.tmp"; then
                        sed -i "s/#!date.*/#!date = $current_date/" "$plugin_file"
                        grep -q '^#!date' "$conf_file" && sed -i "s/^#!date.*/#!date = $current_date/" "$conf_file" || echo -e "\n#!date = $current_date" >> "$conf_file"
                    fi
                fi
                rm -f "plugin_new.tmp" "plugin_old.tmp"
            fi
            # 规范conf文件
            sed -i '/^#!date/,/^$/{/^$/d}' $conf_file
        done

        # Update loon/README.md
        mv -f tmp/*.plugin "$loon_plugin_folder/"
        process_plugin_file() {
          local file="$1"
          plugin_name=$(grep -i "#!name" "$file" | awk -F '=' '{print $2}' | tr -d '[:space:]')
          if [ -n "$plugin_name" ]; then
            install_link="https://www.nsloon.com/openloon/import?plugin=$base_url$file"
            raw_link="$base_url$file"
            echo "- **$plugin_name**：" >> "$readme_file"
            echo "  - [点击安装]($install_link)" >> "$readme_file"
            echo "  - [$raw_link]($raw_link)" >> "$readme_file"
          fi
        }
        loon_plugin_files=($(find "$loon_plugin_folder/" -maxdepth 1 -type f -name "Loon*.plugin" -exec grep -H "#!date" {} + | sort -k3 -r | awk -F ':' '{print $1}'))
        other_plugin_files=($(find "$loon_plugin_folder/" -maxdepth 1 -type f -name "*.plugin" ! -name "Loon*.plugin" -exec grep -H "#!date" {} + | sort -k3 -r | awk -F ':' '{print $1}'))
        readme_file="tmp/README.md"
        touch "$readme_file" && echo "# 🎈Loon插件" > "$readme_file"
        for file in "${loon_plugin_files[@]}"; do
           process_plugin_file "$file"
        done
        for file in "${other_plugin_files[@]}"; do
           process_plugin_file "$file"
        done
        echo "## ⚠️免责声明" >> "$readme_file"
        sed -n '/^## ⚠️免责声明$/,/^##/{/^##/!p}' README.md >> "$readme_file"
        sed -i '/# 🎈Loon插件/,$d' loon/README.md
        cat $readme_file >> loon/README.md
        
        mv -f tmp/README.md "$loon_plugin_folder/"
        cp -fr tmp/* plugin/
        rm -fr tmp

    - name: Commit and push
      run: |
        git config --global user.email "mphin@qq.com" && git config --global user.name "Bot"
        git add . && git commit -m "插件更新$(date +'%Y-%m-%d %H:%M')" || exit 0
        git push

    - name: Cleanup Workflow
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 2
