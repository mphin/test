name: Rule_update
on:
  push:
    branches:
      - main
    paths:
      - 'rules/*.list'
jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Set up time zone
        run: sudo timedatectl set-timezone Asia/Shanghai
      
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get last commit files
        id: last_commit
        run: |
          echo "sha=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Process Rule File
        id: file_list
        run: |
          COMMIT=${{ env.sha }}
          URL="https://api.github.com/repos/${{ github.repository }}/compare/${COMMIT}^...${COMMIT}"
          FILES=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" $URL | jq -r '.files[] | select(.filename | test("^rules/.*\\.list$")) | .filename')

          echo 更新规则文件
          for file in $FILES; do
            # 修正字符
            sed -i 's/＞/>/g' $file
            # 获取变量
            current_date=$(TZ=Asia/Shanghai date '+%Y年%m月%d日%H:%M:%S')
            count=$(grep -v -e '^$' -e '^#' -e '^!' $file | wc -l)
            count_with_unit="${count}条"
            # 修改数量和日期
            sed -i "s/^# 更新: .*/# 更新: $current_date/" $file
            sed -i "s/^# 数量: .*/# 数量: $count_with_unit/" $file
            # 修改规则正序
            temp_file=$(mktemp)
            domain_list=""
            while IFS= read -r line || [[ -n $line ]]; do
              if [[ ! $line =~ ^[!#[:space:]]*$ && $line =~ ^(IP|DOMAIN).* ]]; then
                domain_list="$domain_list"$'\n'"$line"
              else
                if [[ $domain_list ]]; then
                  echo "$domain_list" | sort | sed '/^$/d' >> "$temp_file"
                  domain_list=""
                fi
                echo "$line" >> "$temp_file"
              fi
            done < "$file"
            if [[ $domain_list ]]; then
              echo "$domain_list" | sort | sed '/^$/d' >> "$temp_file"
            fi
            mv "$temp_file" "$file"
           # 转换Classical规则
           mkdir -p rules/classical
           cp "$file" "rules/classical/$(basename $file .list).yaml"
           sed -i '1s/^/payload:\n/' "rules/classical/$(basename $file .list).yaml"
           sed -i '1!{/^DOMAIN\|^IP\|^PROCESS/!d; s/^/  - /}' "rules/classical/$(basename $file .list).yaml"
           # 排序Classical规则
           { head -n 1 "rules/classical/$(basename $file .list).yaml"; tail -n +2 "rules/classical/$(basename $file .list).yaml" | sort; } > "rules/classical/$(basename $file .list).yaml.sorted"
           mv "rules/classical/$(basename $file .list).yaml.sorted" "rules/classical/$(basename $file .list).yaml"
           
           # 转换singbox规则
           mkdir -p rules/singbox
           version="1"
           domain=()
           domain_suffix=()
           ip_cidr=()
           domain_keyword=()

           while IFS= read -r line; do
               # 忽略注释行和空行
               if [[ $line =~ ^\ *# ]] || [[ -z $line ]]; then
                   continue
               fi
    
               # DOMAIN
               if [[ $line =~ ^DOMAIN, ]]; then
                   domain_value=$(echo "$line" | cut -d ',' -f 2)
                   domain+=("$domain_value")
               fi
    
               # DOMAIN-SUFFIX
               if [[ $line =~ ^DOMAIN-SUFFIX, ]]; then
                   domain_suffix_value=".${line#DOMAIN-SUFFIX,}"
                   domain_suffix+=("$domain_suffix_value")
               fi
    
               # IP-CIDR
               if [[ $line =~ ^IP-CIDR, ]]; then
                   ip_cidr_value=$(echo "$line" | cut -d ',' -f 2 | sed 's/,no-resolve//')
                   ip_cidr+=("$ip_cidr_value")
               fi
    
               # DOMAIN-KEYWORD
               if [[ $line =~ ^DOMAIN-KEYWORD, ]]; then
                   domain_keyword_value=$(echo "$line" | cut -d ',' -f 2)
                   domain_keyword+=("$domain_keyword_value")
               fi
    
           done < "$file"

           output_file="$(basename "$file" .list).json"

           # 生成JSON文件
           {
               echo "{"
               echo "    \"version\": \"$version\","
               echo "    \"rules\": {"
               echo "        \"domain\": $(printf '%s\n' "${domain[@]}" | jq -R . | jq -s .),"
               echo "        \"domain_suffix\": $(printf '%s\n' "${domain_suffix[@]}" | jq -R . | jq -s .),"
               echo "        \"ip_cidr\": $(printf '%s\n' "${ip_cidr[@]}" | jq -R . | jq -s .),"
               echo "        \"domain_keyword\": $(printf '%s\n' "${domain_keyword[@]}" | jq -R . | jq -s .)"
               echo "    }"
               echo "}" > "$output_file"
           }
          done

          echo 更新README.md
          new_date=$(TZ='Asia/Shanghai' date +'%Y年%m月%d日%H:%M:%S')
          count_1=$(grep -v -e '^$' -e '^#' -e '^!' rules/*.list | grep -v 'Adblack.list' | wc -l)
          sed -i "s/最近更新: .*/最近更新: $new_date/" README.md
          sed -i "s/规则数量: .*/规则数量: $count_1条/" README.md
          
      - name: Commit And Push
        run: |
          git config --global user.email "long632450362@qq.com" && git config --global user.name "Bot"
          git add . && git commit -m "日常更新$(date +'%Y-%m-%d %H:%M')"
          git push

      - name: Cleanup Workflow
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 1
          keep_minimum_runs: 2
